#!/bin/bash

appname=$(cat stack.config | awk 'NR==1{print $1}' | awk -F= '{ print $NF }' | sed 's/\"//g')
region=$(cat stack.config | awk 'NR==2{print $1}' | awk -F= '{ print $NF }' | sed 's/\"//g')
bucketname="${appname}"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

function test_stack {
    url=$(aws cloudformation describe-stacks --stack-name $appname --region us-west-2 --query "Stacks[].Outputs" | \
        grep https | \
        sed 's/"OutputValue": "//g' | \
        sed 's/"//g' | \
        sed -e 's/\/$//' | \
        awk '{$1=$1};1') 
        
    get=$(curl -i -s -X GET \
      -H "Content-Type: application/json" \
      "${url}?TableName=checklist_redhat" | grep HTTP)
    if [[ $get == *"HTTP/2 200"* ]]; then echo -e "${GREEN}GET Test: $get${NC}"; else echo -e "${RED} GET Test: $get${NC}"; fi

    post=$(curl -i -s -X POST -d @events/POST_event.json \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      $url | grep HTTP)
    echo ""
    if [[ $get == *"HTTP/2 200"* ]]; then echo -e "${GREEN}POST Test: $get${NC}"; else echo -e "${RED} POST Test: $get${NC}"; fi
    echo ""

    put=$(curl -i -s -X PUT -d @events/PUT_event.json \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      $url | grep HTTP)
    if [[ $get == *"HTTP/2 200"* ]]; then echo -e "${GREEN}PUT Test: $get${NC}"; else echo -e "${RED} PUT Test: $get${NC}"; fi
    echo ""

    delete=$(curl -i -s -X DELETE -d @events/DELETE_event.json \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      $url | grep HTTP)
    if [[ $get == *"HTTP/2 200"* ]]; then echo -e "${GREEN}DELETE Test: $get${NC}"; else echo -e "${RED} DELETE Test: $get${NC}"; fi
    echo ""
}


function deploy_stack {
    sam build 
    sam package --output-template packaged.yaml --s3-bucket $bucketname 
    sed -i "s/TableName:.*/TableName: ${appname}/g" packaged.yaml

    echo "Deploying..."
    sam deploy --template-file packaged.yaml --region $region \
      --capabilities CAPABILITY_IAM --stack-name $appname --parameter-overrides "appname=vulndbmiguel"
    aws cloudformation describe-stacks --stack-name $appname --region $region --query "Stacks[].Outputs"
}


if [ "$1" == "create" ]
then
    # Create Bucket
    
    aws s3 mb s3://$bucketname --region $region > /dev/null
    echo -e "${YELLOW}Deploying Stack...${NC}"
    deploy_stack > /dev/null && echo -e "${GREEN}Stack Deployed Successfully ${NC}" || echo -e "${RED} Stack Deploy Error: ${NC}"
    aws dynamodb batch-write-item --request-items file://db_data.json > /dev/null
elif [ "$1" == "modify" ]
then
    echo -e "${YELLOW}Deploying Stack...${NC}"
    deploy_stack > /dev/null && echo -e "${GREEN}Stack Deployed Successfully ${NC}" || echo -e "${RED} Stack Deploy Error: ${NC}"
elif [ "$1" == "delete" ]
then
    # Remove Bucket
    aws s3 rb s3://$bucketname --region $region --force > /dev/null

    # Remove Stack
    echo -e "${YELLOW}Deleting Stack...${NC}"

    aws cloudformation delete-stack --stack-name $appname && echo -e "${GREEN}Stack Deleted Successfully ${NC}" || echo -e "${RED} Stack Delete Error: ${NC}"
elif [ "$1" == "test" ]
then
  test_stack
else
    echo 'USAGE: ./stack < create | modify | delete | test >'
fi

